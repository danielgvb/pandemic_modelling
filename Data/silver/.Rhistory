geom_line() + ggtitle("Daily Average temperature in Medellin")
# precipitation from temp
ggplot(temp, aes(x=date, y=prcp)) +
geom_line() + ggtitle("Daily  precipitation in Medellin")
# temperature
ggplot(temp, aes(x=date, y=tavg)) +
geom_line() + ggtitle("Daily Average temperature in Medellin")
# Required Packages--------------------
library(readxl)
library(ggplot2)
library(dplyr)
library(lubridate)
library(corrplot)
library(feasts)
library(tsibble)
library(forecast)
library(tidyr)
library(ggthemes)
library(car)
library(DIMORA)
cwd()
getwd()
setwd("C:/Users/danie/Documents/")
# 1. Import Data--------------------------
# target variable
sales <- read_excel("GitHub/time_series_padova/data/sales/sales_dimsum_31102024.xlsx")
# load packages
library(readxl)
library(DIMORA)
getwd()
# change directory
setwd('Github/pandemic_modelling/Data/silver/')
df_m<- read_excel("covid_data_monthly.xlsx")
df_m<- read_csv("covid_data_monthly.csv")
df_m<- read("covid_data_monthly.csv")
df_m<- read.csv("covid_data_monthly.csv")
covid_series <- df_m$new_cases
bm_m <-BM(covid_series,display = T) # show graphical view of results / display = True
library(dplyr)
df_col <- df_m %>% filter(country == "Colombia")
df_col
plot(df_col$cases)
covid_series_col <- df_col$new_cases
bm_m <-BM(covid_series_col,display = T) # show graphical view of results / display = True
summary(bm_m)
# do for 25% of data
now(covid_series_col)
# do for 25% of data
nrow(covid_series_col)
# do for 25% of data
length(covid_series_col)
# do for 25% of data
covid_series_col_s <- covid_series_col[1:20]
covid_series_col_s
bm_m <-BM(covid_series_col_s,display = T) # show graphical view of results / display = True
# weekly data------------------------
df_w<- read.csv("covid_data_weekly.csv")
# filter dataframe
df_col_w <- df_w %>% filter(country == "Colombia")
covid_series_col_w <- df_col_w$new_cases
# run simple bass model
bm_w <-BM(covid_series_col_w,display = T) # show graphical view of results / display = True
summary(bm_w)
# do for 25% of data
covid_series_col_ws <- covid_series_col_w[1:20]
bm_w <-BM(covid_series_col_ws,display = T) # show graphical view of results / display = True
# daily data------------------------
df_d<- read.csv("covid_data.csv")
# filter dataframe
df_col_d <- df_d %>% filter(country == "Colombia")
covid_series_col_d <- df_col_d$new_cases
# run simple bass model
bm_d <-BM(covid_series_col_d,display = T) # show graphical view of results / display = True
summary(bm_d)
# do for 25% of data
covid_series_col_ds <- covid_series_col_w[1:75]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:75  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, fitted_values, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# daily data------------------------
df_d<- read.csv("covid_data.csv")
# filter dataframe
df_col_d <- df_d %>% filter(country == "Colombia")
covid_series_col_d <- df_col_d$new_cases
# run simple bass model
bm_d <-BM(covid_series_col_d,display = T) # show graphical view of results / display = True
summary(bm_d)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:75]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
instantaneous_fitted <- make.instantaneous(fitted_values)
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:75  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, instantaneous_fitted, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:120]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
instantaneous_fitted <- make.instantaneous(fitted_values)
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:120  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, instantaneous_fitted, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:600]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
instantaneous_fitted <- make.instantaneous(fitted_values)
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:600  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, instantaneous_fitted, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:600]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
instantaneous_fitted <- make.instantaneous(fitted_values)
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:600  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, instantaneous_fitted, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# filter dataframe
df_col_d <- df_d %>% filter(country == "Colombia")
covid_series_col_d <- df_col_d$new_cases
# run simple bass model
bm_d <-BM(covid_series_col_d,display = T) # show graphical view of results / display = True
summary(bm_d)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:75]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
instantaneous_fitted <- make.instantaneous(fitted_values)
# Create a sequence to match the time series index
time_full <- 1:length(covid_series_col_d)  # Full series time indices
time_subset <- 1:75  # Training subset indices
# Plot actual values (Full dataset)
plot(time_full, covid_series_col_d, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, instantaneous_fitted, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# Plot actual values (Full dataset)
plot(time_full, df_col_d$cases, type = "l", col = "black", lwd = 2,
ylab = "Cases", xlab = "Time", main = "Actual vs Fitted Values (BM Model)")
# Add fitted values (Only on training range)
lines(time_subset, fitted_values, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topleft", legend = c("Actual", "Fitted (BM)"),
col = c("black", "red"), lty = c(1, 2), lwd = 2)
# filter dataframe
df_col_d <- df_d %>% filter(country == "Colombia")
covid_series_col_d <- df_col_d$new_cases
# run simple bass model
bm_d <-BM(covid_series_col_d,display = T) # show graphical view of results / display = True
summary(bm_d)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:75]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
# Extract fitted values (BM model predictions for the subset)
fitted_values <- bm_d$fitted
# Compute instantaneous fitted values (daily new cases)
instantaneous_fitted <- c(NA, diff(fitted_values))  # First differences
# Predict beyond the cutoff (from day 76 onward)
forecast_horizon <- length(covid_series_col_d) - 75  # Future days to predict
predicted_values <- predictBM(bm_d, h = forecast_horizon)
# do for 75 days of data
covid_series_col_ds <- covid_series_col_w[1:75]
bm_d <-BM(covid_series_col_ds,display = T) # show graphical view of results / display = True
fitted_forecast<- predict(bm_d, newx=c(1:legnth(covid_series_col_d)))
fitted_forecast<- predict(bm_d, newx=c(1:length(covid_series_col_d)))
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
plot(covid_series_col_ds, type= "b")
lines(fitted_forecast_inst, lwd=2, col=2)
plot(covid_series_col_d, type= "b")
lines(fitted_forecast_inst, lwd=2, col=2)
plot(covid_series_col_ds, type= "b")
lines(fitted_forecast_inst, lwd=2, col=2)
plot(covid_series_col_d, type= "b")
lines(fitted_forecast_inst, lwd=2, col=2)
plot(fitted_forecast_inst)
plot(covid_series_col_d, type= "b")
lines(fitted_forecast_inst, lwd=2, col=2)
library(ggplot2)
library(gridExtra)  # For arranging plots in a grid
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first 75 days
covid_series_train <- covid_series[1:75]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
unique_countries
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
n <- 150
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
n <- 720
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
n <- nrow(df_country)
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
n <- 90
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
n <- 150
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Define function to fit Bass model and generate plot for each country
plot_bm_model <- function(country_name, df, n =150) {
# Filter data for the specific country
df_country <- df %>% filter(country == country_name)
covid_series <- df_country$new_cases
# Train BM model on first n days
covid_series_train <- covid_series[1:n]
bm_model <- BM(covid_series_train, display = FALSE)
# Forecast for the entire period
fitted_forecast <- predict(bm_model, newx = c(1:length(covid_series)))
# Compute instantaneous fitted values
fitted_forecast_inst <- make.instantaneous(fitted_forecast)
# Create plot using ggplot2
df_plot <- data.frame(
Time = 1:length(covid_series),
Actual = covid_series,
Fitted = fitted_forecast_inst
)
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("COVID-19 Cases in", country_name)) +
ylab("Daily Cases") + xlab("Time (Days)") +
theme_minimal()
return(p)
}
# Get list of unique countries
unique_countries <- unique(df_d$country)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
## Weekly-----------------------------------
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_w, n=25)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_m, n=12)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
length_series <- nrow(df_col_d)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_d, n=length_series)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
length_series <- nrow(df_col_w)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_w, n=length_series)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
### Monthly----------------------------------
length_series <- nrow(df_col)
# Loop through the first 10 countries (to fit 2x5 grid)
plot_list <- lapply(unique_countries, function(country) {
plot_bm_model(country, df_m, n=length_series)
})
# Arrange plots in a 2x5 grid
grid.arrange(grobs = plot_list, nrow = 2, ncol = 5)
